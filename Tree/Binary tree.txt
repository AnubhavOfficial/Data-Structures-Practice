#include "iostream"
#include <queue>
using namespace std;

struct tree
{
    int data;
    struct tree* left;
    struct tree* right;
};

int main()
{
    tree* root = new tree();
    queue <tree*> q;
    int arr[10];
        tree* out;
        tree* start;
    int data,i=0,count =0,choice,a=0;
    cout<<"Enter the root"<<endl;
    cin>>root->data;
    root->left = nullptr;
    root->right = nullptr;
    do{
    cout<<"Enter your choice\n1. Insert\n2. Delete\n3. Search\n4. Display\n5. Exit\n\n";
    cin>>choice;
    switch(choice)
    {
        case 1:
        {
        tree *child = new tree();
        cout<<"Enter the node : ";
        cin>>child->data;
        child->left = nullptr;
        child->right = nullptr;
        queue<tree*> que;
        que.push(root);
        while(!que.empty())
        {
            tree* temp = que.front();
            que.pop();
            if(temp->left != nullptr)
            {
                que.push(temp->left);
            }
            else
            {
                temp->left = child;
                break;
            }
            if(temp->right != nullptr)
            {
                que.push(temp->right);
            }
            else
            {
                temp->right = child;
                break;
            }
            
        }
        /*start = root;
        tree *child = new tree();
        do
        {
        if(start->left == nullptr)
        {
        child->data = data;
        child->left = nullptr;
        child->right = nullptr;
        start->left = child;
        count ++;
        break;
        }
        else
        if(start->right == nullptr)
        {
        child->data = data;
        child->left = nullptr;
        child->right = nullptr;
        start->right = child;
        count ++;
        break;
        }
        else
        start = start->left;
        }while(i == 0);
        */
        break;
        }
        case 2:
        {
            
        cout<<"Enter the element you want to delete : ";
            cin>>data;
            queue <tree*> quest;
            quest.push(root);
            while(!quest.empty())
            {
            tree* temp = quest.front();
            quest.pop();
            if(temp->data == data)
            {
                
                cout<<data<< " is deleted \n";
                if(temp->left == nullptr)
                {
                    temp->data = NULL;
                }
                else
                {
                    temp->data = temp->left->data;
                    temp->left->data = NULL;
                
                break;
                }
            }
            if(temp->left != nullptr)
            {
                quest.push(temp->left);
            }
            if(temp->right != nullptr)
            {
                quest.push(temp->right);
            }
            
            }
            break;
        }
        case 3:
        {
            cout<<"Enter the element you want to search : ";
            cin>>data;
            queue <tree*> ques;
            ques.push(root);
            while(!ques.empty())
            {
            tree* temp = ques.front();
            ques.pop();
            if(temp->data == data)
            {
                out = temp;
                cout<<data<< " is found \n";
                cout<<"Element's left = "<<temp->left->data<<endl;
                cout<<"Element's right = "<<temp->right->data<<endl;
                break;
            }
            if(temp->left != nullptr)
            {
                ques.push(temp->left);
            }
            if(temp->right != nullptr)
            {
                ques.push(temp->right);
            }
            
            }
            break;
        }
        
        case 4:
        {
        cout<<"Elements are as follows\n\n";
        
        cout<<root->data<<" is the root\n\n";
        q.push(root);
        while(!q.empty())
        {
            tree* temp = q.front();
            q.pop();
            if(temp->left != nullptr)
            {
                cout<<temp->left->data<<" left child of "<<temp->data<<". \n";
                q.push(temp->left);
                
            }
            if(temp->right != nullptr)
            {
                cout<<temp->right->data<<" right child of "<<temp->data<<". \n";
                q.push(temp->right);
               
            }
            
        }
        
        break;
    }
    }
    }while(choice != 5);
    
    
    
    
}
